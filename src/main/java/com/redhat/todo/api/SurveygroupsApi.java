/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.redhat.todo.api;

import com.redhat.todo.model.Employee;
import com.redhat.todo.model.EmployeeAssignment;
import com.redhat.todo.model.EmployeeAssignmentWithEmployee;
import com.redhat.todo.model.GenericError;
import java.util.List;
import com.redhat.todo.model.SurveyGroup;
import com.redhat.todo.model.SurveyGroupEntity;
import com.redhat.todo.model.SurveySubmission;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-24T17:30:20.735351-05:00[America/New_York]")
@Validated
@Api(value = "surveygroups", description = "the surveygroups API")
public interface SurveygroupsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /surveygroups/{surveyGroupId}/defaultSkill : Add a default skill to a survey group.
     * When a default skill is added to a survey group all survey submissions created for the survey group will include the default skill. 
     *
     * @param surveyGroupId ID of the survey group as a GUID. (required)
     * @param UUID An array of skillIds contained in the request body. (required)
     * @return The Default Skills were successfully created. (status code 201)
     *         or The Skills or Survey Group contained in the request body are invalid. (status code 400)
     *         or The Skills or Survey Group cannot be created because the user have not been authorized. (status code 401)
     *         or The Skills and Survey Group matching the details already exist. (status code 409)
     */
    @ApiOperation(value = "Add a default skill to a survey group.", nickname = "addDefaultSkill", notes = "When a default skill is added to a survey group all survey submissions created for the survey group will include the default skill. ", tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The Default Skills were successfully created."),
        @ApiResponse(code = 400, message = "The Skills or Survey Group contained in the request body are invalid."),
        @ApiResponse(code = 401, message = "The Skills or Survey Group cannot be created because the user have not been authorized."),
        @ApiResponse(code = 409, message = "The Skills and Survey Group matching the details already exist.") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/surveygroups/{surveyGroupId}/defaultSkill",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addDefaultSkill(@ApiParam(value = "ID of the survey group as a GUID.", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId,@ApiParam(value = "An array of skillIds contained in the request body.", required = true) @Valid @RequestBody List<UUID> UUID) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /surveygroups/{surveyGroupId}/assignment/{employeeId} : Assign an employee under their GUID to a survey group
     * Assign an employee under their GUID to a survey group
     *
     * @param surveyGroupId  (required)
     * @param employeeId  (required)
     * @param employeeAssignment  (required)
     * @return The employee was associated with the survey group successfully (status code 200)
     *         or Validations failed for the Employee Assignment. (status code 400)
     *         or The currently authenticated user is not authorized to associated employees with survey groups. (status code 401)
     *         or Either the employee GUID or the survey group GUID were not found (status code 404)
     */
    @ApiOperation(value = "Assign an employee under their GUID to a survey group", nickname = "assignEmployeeToSurveyGroup", notes = "Assign an employee under their GUID to a survey group", response = EmployeeAssignment.class, tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The employee was associated with the survey group successfully", response = EmployeeAssignment.class),
        @ApiResponse(code = 400, message = "Validations failed for the Employee Assignment.", response = GenericError.class),
        @ApiResponse(code = 401, message = "The currently authenticated user is not authorized to associated employees with survey groups."),
        @ApiResponse(code = 404, message = "Either the employee GUID or the survey group GUID were not found") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/surveygroups/{surveyGroupId}/assignment/{employeeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EmployeeAssignment> assignEmployeeToSurveyGroup(@ApiParam(value = "", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId,@ApiParam(value = "", required = true) @PathVariable("employeeId") String employeeId,@ApiParam(value = "", required = true) @Valid @RequestBody EmployeeAssignment employeeAssignment) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"billableRole\" : \"Consultant\", \"id\" : \"f9238beb-9649-4983-9059-4f0ee372d56e\", \"surveyGroup\" : \"{}\", \"employee\" : \"{}\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /surveygroups : Create a new survey group in the Feedback 360 Survey API.
     * A survey group is the starting point for creating a Feedback 360 Survey. A survey group contains the project information, list of employees on the project that will receive the survey, and a list of technologies used on the project. 
     *
     * @param surveyGroup A new survey group resource contained in the request body. (required)
     * @return The survey group was successfully created. The location of the new survey group resource is in the location header of the response. (status code 200)
     *         or The survey group contained in the request body is invalid. (status code 400)
     *         or The survey group cannot be created because the user has not been authorized. (status code 401)
     *         or The survey group matching the details already exists. (status code 409)
     */
    @ApiOperation(value = "Create a new survey group in the Feedback 360 Survey API.", nickname = "createSurveyGroup", notes = "A survey group is the starting point for creating a Feedback 360 Survey. A survey group contains the project information, list of employees on the project that will receive the survey, and a list of technologies used on the project. ", response = SurveyGroup.class, tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The survey group was successfully created. The location of the new survey group resource is in the location header of the response.", response = SurveyGroup.class),
        @ApiResponse(code = 400, message = "The survey group contained in the request body is invalid."),
        @ApiResponse(code = 401, message = "The survey group cannot be created because the user has not been authorized."),
        @ApiResponse(code = 409, message = "The survey group matching the details already exists.") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/surveygroups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SurveyGroup> createSurveyGroup(@ApiParam(value = "A new survey group resource contained in the request body.", required = true) @Valid @RequestBody SurveyGroup surveyGroup) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tsmId\" : \"timmytsm@redhat.com\", \"opportunityId\" : \"3456NAS\", \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"defaultSkills\" : [ { \"skillsBaseId\" : 1234, \"skill\" : \"Crucial Conversations\", \"description\" : \"The ability to have crucial conversations with clients.\", \"active\" : true, \"id\" : \"d567521f-13a6-4237-936c-40bbbf388bc5\", \"category\" : \"leadership\" }, { \"skillsBaseId\" : 1234, \"skill\" : \"Crucial Conversations\", \"description\" : \"The ability to have crucial conversations with clients.\", \"active\" : true, \"id\" : \"d567521f-13a6-4237-936c-40bbbf388bc5\", \"category\" : \"leadership\" } ], \"createdBy\" : \"janedoe\", \"modifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"modifiedBy\" : \"janedoe\", \"id\" : \"f1ad7649-eb70-4499-9c82-a63fe2c6dc71\", \"projectName\" : \"NASA App Modernization\", \"projectCreatorId\" : \"janedoe@redhat.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /surveygroups/{surveyGroupId}/createSurveySubmissions : Create a batch of SurveySubmissions for a survey group in the Feedback 360 Survey API.
     * Returns a List of Employees in which surveys where created.
     *
     * @param surveyGroupId ID of the survey group as a GUID. (required)
     * @return The survey submissions were successfully created and a List of Employees in which surveys where created for is returned. (status code 200)
     *         or The survey group contained in the request is invalid. (status code 400)
     *         or The survey submission cannot be created because the user has not been authorized. (status code 401)
     */
    @ApiOperation(value = "Create a batch of SurveySubmissions for a survey group in the Feedback 360 Survey API.", nickname = "createSurveySubmissions", notes = "Returns a List of Employees in which surveys where created.", response = Employee.class, responseContainer = "List", tags={ "surveySubmission", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The survey submissions were successfully created and a List of Employees in which surveys where created for is returned.", response = Employee.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "The survey group contained in the request is invalid."),
        @ApiResponse(code = 401, message = "The survey submission cannot be created because the user has not been authorized.") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/surveygroups/{surveyGroupId}/createSurveySubmissions",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Employee>> createSurveySubmissions(@ApiParam(value = "ID of the survey group as a GUID.", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"Consultant\", \"dateTermsAccepted\" : \"2021-02-09T00:00:00.000+0000\", \"name\" : \"John Smith\", \"termsVersionNumber\" : 1.0, \"id\" : \"jsmith@redhat.com\", \"hasAcceptedTerms\" : false, \"email\" : \"jsmith@redhat.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /surveygroups/{surveyGroupId}/defaultSkill/{defaultSkillId} : Delete default skills for a Survey Group.
     * This operation will delete the given default skill from the survey group. 
     *
     * @param surveyGroupId ID of the survey group as a GUID. (required)
     * @param defaultSkillId ID of the Default Skill as a GUID. (required)
     * @return The Default Skill has been removed from the survey group. (status code 204)
     */
    @ApiOperation(value = "Delete default skills for a Survey Group.", nickname = "deleteDefaultSkill", notes = "This operation will delete the given default skill from the survey group. ", tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The Default Skill has been removed from the survey group.") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/surveygroups/{surveyGroupId}/defaultSkill/{defaultSkillId}"
    )
    default ResponseEntity<Void> deleteDefaultSkill(@ApiParam(value = "ID of the survey group as a GUID.", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId,@ApiParam(value = "ID of the Default Skill as a GUID.", required = true) @PathVariable("defaultSkillId") UUID defaultSkillId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /surveygroups/{surveyGroupId} : Disable a survey group from Feedback 360 Survey API.
     * This operation will delete an entire survey group and all child resources  associated with it. This operation is idempotent. 
     *
     * @param surveyGroupId ID of the survey group as a GUID. (required)
     * @return The survey group represented by the supplied GUID is deleted from the system. (status code 204)
     */
    @ApiOperation(value = "Disable a survey group from Feedback 360 Survey API.", nickname = "deleteSurveyGroupByID", notes = "This operation will delete an entire survey group and all child resources  associated with it. This operation is idempotent. ", tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The survey group represented by the supplied GUID is deleted from the system.") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/surveygroups/{surveyGroupId}"
    )
    default ResponseEntity<Void> deleteSurveyGroupByID(@ApiParam(value = "ID of the survey group as a GUID.", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /surveygroups : Get all survey groups from Feedback 360 Survey API.
     * Get all survey groups in Feedback 360 Survey API. 
     *
     * @return A list of survey groups is returned. The Survey Group object returned will not have the Employee Assignments or Default Skills hydrated. (status code 200)
     */
    @ApiOperation(value = "Get all survey groups from Feedback 360 Survey API.", nickname = "getAllSurveyGroups", notes = "Get all survey groups in Feedback 360 Survey API. ", response = SurveyGroup.class, responseContainer = "List", tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of survey groups is returned. The Survey Group object returned will not have the Employee Assignments or Default Skills hydrated.", response = SurveyGroup.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/surveygroups",
        produces = { "application/json" }
    )
    default ResponseEntity<List<SurveyGroup>> getAllSurveyGroups() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tsmId\" : \"timmytsm@redhat.com\", \"opportunityId\" : \"3456NAS\", \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"defaultSkills\" : [ { \"skillsBaseId\" : 1234, \"skill\" : \"Crucial Conversations\", \"description\" : \"The ability to have crucial conversations with clients.\", \"active\" : true, \"id\" : \"d567521f-13a6-4237-936c-40bbbf388bc5\", \"category\" : \"leadership\" }, { \"skillsBaseId\" : 1234, \"skill\" : \"Crucial Conversations\", \"description\" : \"The ability to have crucial conversations with clients.\", \"active\" : true, \"id\" : \"d567521f-13a6-4237-936c-40bbbf388bc5\", \"category\" : \"leadership\" } ], \"createdBy\" : \"janedoe\", \"modifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"modifiedBy\" : \"janedoe\", \"id\" : \"f1ad7649-eb70-4499-9c82-a63fe2c6dc71\", \"projectName\" : \"NASA App Modernization\", \"projectCreatorId\" : \"janedoe@redhat.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /surveygroups/{surveyGroupId}/assignment : Get list of assigned employees for a given survey group
     * This request will return an array of Employee objects which are associated with a particular survey group.
     *
     * @param surveyGroupId  (required)
     * @return Get a list of employees assigned to a survey group (status code 200)
     */
    @ApiOperation(value = "Get list of assigned employees for a given survey group", nickname = "getEmployeesBySurveyGroup", notes = "This request will return an array of Employee objects which are associated with a particular survey group.", response = EmployeeAssignmentWithEmployee.class, responseContainer = "List", tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Get a list of employees assigned to a survey group", response = EmployeeAssignmentWithEmployee.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/surveygroups/{surveyGroupId}/assignment",
        produces = { "application/json" }
    )
    default ResponseEntity<List<EmployeeAssignmentWithEmployee>> getEmployeesBySurveyGroup(@ApiParam(value = "", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"John Smith\", \"billableRole\" : \"Consultant\", \"employeeId\" : \"jqConsultant\", \"id\" : \"f1ad7649-eb70-4499-9c82-a63fe2c6dc71\", \"email\" : \"jsmith@redhat.com\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"employeeRole\" : \"Senior Consultant\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /surveygroups/{surveyGroupId} : Find a survey group resource by ID
     * Returns a single survey group matching the given ID.
     *
     * @param surveyGroupId ID of the survey group as a GUID. (required)
     * @return A representation of the survey group matching the given surveyGroupID. (status code 200)
     *         or Id must be formatted as a UUID  (status code 400)
     *         or The Survey Group matching the given surveyGroupId has been disabled.  Please contact the Project Manager for more information\&quot; (status code 401)
     *         or A survey group matching the given surveyGroupId was not found. (status code 404)
     */
    @ApiOperation(value = "Find a survey group resource by ID", nickname = "getSurveyGroupById", notes = "Returns a single survey group matching the given ID.", response = SurveyGroup.class, tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A representation of the survey group matching the given surveyGroupID.", response = SurveyGroup.class),
        @ApiResponse(code = 400, message = "Id must be formatted as a UUID "),
        @ApiResponse(code = 401, message = "The Survey Group matching the given surveyGroupId has been disabled.  Please contact the Project Manager for more information\""),
        @ApiResponse(code = 404, message = "A survey group matching the given surveyGroupId was not found.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/surveygroups/{surveyGroupId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SurveyGroup> getSurveyGroupById(@ApiParam(value = "ID of the survey group as a GUID.", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tsmId\" : \"timmytsm@redhat.com\", \"opportunityId\" : \"3456NAS\", \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"defaultSkills\" : [ { \"skillsBaseId\" : 1234, \"skill\" : \"Crucial Conversations\", \"description\" : \"The ability to have crucial conversations with clients.\", \"active\" : true, \"id\" : \"d567521f-13a6-4237-936c-40bbbf388bc5\", \"category\" : \"leadership\" }, { \"skillsBaseId\" : 1234, \"skill\" : \"Crucial Conversations\", \"description\" : \"The ability to have crucial conversations with clients.\", \"active\" : true, \"id\" : \"d567521f-13a6-4237-936c-40bbbf388bc5\", \"category\" : \"leadership\" } ], \"createdBy\" : \"janedoe\", \"modifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"modifiedBy\" : \"janedoe\", \"id\" : \"f1ad7649-eb70-4499-9c82-a63fe2c6dc71\", \"projectName\" : \"NASA App Modernization\", \"projectCreatorId\" : \"janedoe@redhat.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /surveygroups/{surveyGroupId}/submissions : Find all submissions associated to a survey group.
     * A submission contains all the ratings for the skills for a colleague receiving feedback. This operation will return all submissions submitted for a survey group. An empty resource collection is a valid response and indicates no feedback has been submitted. 
     *
     * @param surveyGroupId ID of the survey group as a GUID. (required)
     * @return A list of the feedback submission resources for a survey group. An empty list is valid if the survey group does not have any submissions. (status code 200)
     *         or The survey group given by the surveyGroupId does not exist. (status code 404)
     */
    @ApiOperation(value = "Find all submissions associated to a survey group.", nickname = "getSurveyGroupSubmissions", notes = "A submission contains all the ratings for the skills for a colleague receiving feedback. This operation will return all submissions submitted for a survey group. An empty resource collection is a valid response and indicates no feedback has been submitted. ", response = SurveySubmission.class, responseContainer = "List", tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of the feedback submission resources for a survey group. An empty list is valid if the survey group does not have any submissions.", response = SurveySubmission.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "The survey group given by the surveyGroupId does not exist.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/surveygroups/{surveyGroupId}/submissions",
        produces = { "application/json" }
    )
    default ResponseEntity<List<SurveySubmission>> getSurveyGroupSubmissions(@ApiParam(value = "ID of the survey group as a GUID.", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"feedback\" : \"John was a pleasure to work with and extremely knowledgeable in REST.\", \"submissionStatus\" : \"Complete\", \"surveyAuthor\" : \"{}\", \"submissionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"f1ad7649-eb70-4499-9c82-a63fe2c6dc71\", \"surveySubject\" : \"{}\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /surveygroups/{surveyGroupId}/assignment/{employeeId} : Remove an employee association with a survey group
     * Remove an employee association with a survey group
     *
     * @param surveyGroupId  (required)
     * @param employeeId  (required)
     * @return The employee ID was successfully dissociated from the survey group (status code 204)
     *         or The specified employee ID or survey group ID was not found (status code 404)
     */
    @ApiOperation(value = "Remove an employee association with a survey group", nickname = "removeEmployeeAssignment", notes = "Remove an employee association with a survey group", tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The employee ID was successfully dissociated from the survey group"),
        @ApiResponse(code = 404, message = "The specified employee ID or survey group ID was not found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/surveygroups/{surveyGroupId}/assignment/{employeeId}"
    )
    default ResponseEntity<Void> removeEmployeeAssignment(@ApiParam(value = "", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId,@ApiParam(value = "", required = true) @PathVariable("employeeId") String employeeId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /surveygroups/{surveyGroupId}/defaultSkill : Update the default skills for a survey group. 
     * When a default skill is added to a survey group all survey submissions created for the survey group will include the default skill. 
     *
     * @param surveyGroupId ID of the survey group as a GUID. (required)
     * @param UUID  (optional)
     * @return The survey group represented by the supplied GUID has been updated with the contents of this request. (status code 200)
     *         or The survey group was not updated. Something is wrong with the request like a missing required field. (status code 400)
     */
    @ApiOperation(value = "Update the default skills for a survey group. ", nickname = "updateDefaultSkills", notes = "When a default skill is added to a survey group all survey submissions created for the survey group will include the default skill. ", response = SurveyGroupEntity.class, tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The survey group represented by the supplied GUID has been updated with the contents of this request.", response = SurveyGroupEntity.class),
        @ApiResponse(code = 400, message = "The survey group was not updated. Something is wrong with the request like a missing required field.") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/surveygroups/{surveyGroupId}/defaultSkill",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SurveyGroupEntity> updateDefaultSkills(@ApiParam(value = "ID of the survey group as a GUID.", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId,@ApiParam(value = "") @Valid @RequestBody(required = false) List<UUID> UUID) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"assignments\" : [ { \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"billableRole\" : \"Consultant\", \"id\" : \"f9238beb-9649-4983-9059-4f0ee372d56e\", \"surveyGroup\" : \"{}\", \"employee\" : \"{}\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"billableRole\" : \"Consultant\", \"id\" : \"f9238beb-9649-4983-9059-4f0ee372d56e\", \"surveyGroup\" : \"{}\", \"employee\" : \"{}\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"disabled\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /surveygroups/{surveyGroupId}/assignment/{employeeId} : Allows for updating start/end date and perhaps role for an existing assignment
     * Allows for updating start/end date and perhaps role f
     *
     * @param surveyGroupId  (required)
     * @param employeeId  (required)
     * @param employeeAssignment  (required)
     * @return The employee assignment was updated successfully (status code 200)
     *         or Validations failed for the Employee Assignment. (status code 400)
     *         or The currently authenticated user is not authorized to associated employees with survey groups. (status code 401)
     *         or Either the employee ID or the survey group GUID were not found (status code 404)
     */
    @ApiOperation(value = "Allows for updating start/end date and perhaps role for an existing assignment", nickname = "updateEmployeeAssignment", notes = "Allows for updating start/end date and perhaps role f", response = EmployeeAssignment.class, tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The employee assignment was updated successfully", response = EmployeeAssignment.class),
        @ApiResponse(code = 400, message = "Validations failed for the Employee Assignment.", response = GenericError.class),
        @ApiResponse(code = 401, message = "The currently authenticated user is not authorized to associated employees with survey groups."),
        @ApiResponse(code = 404, message = "Either the employee ID or the survey group GUID were not found") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/surveygroups/{surveyGroupId}/assignment/{employeeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EmployeeAssignment> updateEmployeeAssignment(@ApiParam(value = "", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId,@ApiParam(value = "", required = true) @PathVariable("employeeId") String employeeId,@ApiParam(value = "", required = true) @Valid @RequestBody EmployeeAssignment employeeAssignment) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"billableRole\" : \"Consultant\", \"id\" : \"f9238beb-9649-4983-9059-4f0ee372d56e\", \"surveyGroup\" : \"{}\", \"employee\" : \"{}\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /surveygroups/{surveyGroupId} : Update a Survey Group in Feedback 360 Survey API. 
     * This representation of the survey group contained in this request will replace  the survey group located at this URI. This operation is idempotent. 
     *
     * @param surveyGroupId ID of the survey group as a GUID. (required)
     * @param surveyGroup  (optional)
     * @return The survey group represented by the supplied GUID has been updated with the contents of this request. (status code 200)
     *         or The survey group was not updated. Something is wrong with the request like a missing required field. (status code 400)
     *         or This surveygroup was not found (status code 404)
     */
    @ApiOperation(value = "Update a Survey Group in Feedback 360 Survey API. ", nickname = "updateSurveyGroupByID", notes = "This representation of the survey group contained in this request will replace  the survey group located at this URI. This operation is idempotent. ", response = SurveyGroup.class, tags={ "surveyGroup", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The survey group represented by the supplied GUID has been updated with the contents of this request.", response = SurveyGroup.class),
        @ApiResponse(code = 400, message = "The survey group was not updated. Something is wrong with the request like a missing required field."),
        @ApiResponse(code = 404, message = "This surveygroup was not found") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/surveygroups/{surveyGroupId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SurveyGroup> updateSurveyGroupByID(@ApiParam(value = "ID of the survey group as a GUID.", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId,@ApiParam(value = "") @Valid @RequestBody(required = false) SurveyGroup surveyGroup) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tsmId\" : \"timmytsm@redhat.com\", \"opportunityId\" : \"3456NAS\", \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"defaultSkills\" : [ { \"skillsBaseId\" : 1234, \"skill\" : \"Crucial Conversations\", \"description\" : \"The ability to have crucial conversations with clients.\", \"active\" : true, \"id\" : \"d567521f-13a6-4237-936c-40bbbf388bc5\", \"category\" : \"leadership\" }, { \"skillsBaseId\" : 1234, \"skill\" : \"Crucial Conversations\", \"description\" : \"The ability to have crucial conversations with clients.\", \"active\" : true, \"id\" : \"d567521f-13a6-4237-936c-40bbbf388bc5\", \"category\" : \"leadership\" } ], \"createdBy\" : \"janedoe\", \"modifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"modifiedBy\" : \"janedoe\", \"id\" : \"f1ad7649-eb70-4499-9c82-a63fe2c6dc71\", \"projectName\" : \"NASA App Modernization\", \"projectCreatorId\" : \"janedoe@redhat.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
