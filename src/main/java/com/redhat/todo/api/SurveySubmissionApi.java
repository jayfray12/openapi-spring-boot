/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.redhat.todo.api;

import com.redhat.todo.model.SurveySubmission;
import com.redhat.todo.model.SurveySubmissionEntity;
import com.redhat.todo.model.SurveySubmissionWithSkillRating;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-24T17:30:20.735351-05:00[America/New_York]")
@Validated
@Api(value = "surveySubmission", description = "the surveySubmission API")
public interface SurveySubmissionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /surveySubmission/{surveySubmissionId} : Disable a surveySubmission from Feedback 360 Survey API.
     * This operation will disable a survey submission and all child resources  associated with it. This operation is idempotent. 
     *
     * @param surveySubmissionId ID of the survey submission as a GUID. (required)
     * @return The survey submission represented by the supplied GUID is disabled. (status code 204)
     */
    @ApiOperation(value = "Disable a surveySubmission from Feedback 360 Survey API.", nickname = "disableSurveySubmission", notes = "This operation will disable a survey submission and all child resources  associated with it. This operation is idempotent. ", tags={ "surveySubmission", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The survey submission represented by the supplied GUID is disabled.") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/surveySubmission/{surveySubmissionId}"
    )
    default ResponseEntity<Void> disableSurveySubmission(@ApiParam(value = "ID of the survey submission as a GUID.", required = true) @PathVariable("surveySubmissionId") UUID surveySubmissionId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /surveySubmission/reviewedBy/{employeeId} : Fetch the survey submissions reviewed by the given employee Id.
     * Returns all survey submissions that have been reviewed by the employee ID.
     *
     * @param employeeId Employee&#39;s RedHat Kerberos ID. (required)
     * @return Survey submissions associated with the survey submission resource ID (status code 200)
     *         or Survey submissions matching the given employee ID were not found. (status code 404)
     */
    @ApiOperation(value = "Fetch the survey submissions reviewed by the given employee Id.", nickname = "getReviewedByByEmployeeId", notes = "Returns all survey submissions that have been reviewed by the employee ID.", response = SurveySubmission.class, responseContainer = "List", tags={ "surveySubmission", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Survey submissions associated with the survey submission resource ID", response = SurveySubmission.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Survey submissions matching the given employee ID were not found.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/surveySubmission/reviewedBy/{employeeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<SurveySubmission>> getReviewedByByEmployeeId(@ApiParam(value = "Employee's RedHat Kerberos ID.", required = true) @PathVariable("employeeId") String employeeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"feedback\" : \"John was a pleasure to work with and extremely knowledgeable in REST.\", \"submissionStatus\" : \"Complete\", \"surveyAuthor\" : \"{}\", \"submissionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"f1ad7649-eb70-4499-9c82-a63fe2c6dc71\", \"surveySubject\" : \"{}\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /surveySubmission/reviewedOn/{employeeId} : Fetch the survey submissions that the given employee Id was reviewed on.
     * Returns all survey submissions that the employee has been reviewed on.
     *
     * @param employeeId Employee&#39;s RedHat Kerberos ID. (required)
     * @return Survey submissions associated that the employee was reviewed on. (status code 200)
     *         or Survey submissions matching the given employee ID were not found. (status code 404)
     */
    @ApiOperation(value = "Fetch the survey submissions that the given employee Id was reviewed on.", nickname = "getReviewedOnByEmployeeId", notes = "Returns all survey submissions that the employee has been reviewed on.", response = SurveySubmission.class, responseContainer = "List", tags={ "surveySubmission", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Survey submissions associated that the employee was reviewed on.", response = SurveySubmission.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Survey submissions matching the given employee ID were not found.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/surveySubmission/reviewedOn/{employeeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<SurveySubmission>> getReviewedOnByEmployeeId(@ApiParam(value = "Employee's RedHat Kerberos ID.", required = true) @PathVariable("employeeId") String employeeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"feedback\" : \"John was a pleasure to work with and extremely knowledgeable in REST.\", \"submissionStatus\" : \"Complete\", \"surveyAuthor\" : \"{}\", \"submissionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"f1ad7649-eb70-4499-9c82-a63fe2c6dc71\", \"surveySubject\" : \"{}\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /surveySubmission/{surveySubmissionId} : Fetch the survey submission associated with the survey submission resource ID
     * Returns a survey submission matching the submission ID.
     *
     * @param surveySubmissionId ID of the surveyGroup as a GUID. (required)
     * @return Survey submission associated with the survey submission resource ID (status code 200)
     *         or An survey submission matching the given submission ID was not found. (status code 404)
     */
    @ApiOperation(value = "Fetch the survey submission associated with the survey submission resource ID", nickname = "getSurveySubmissionById", notes = "Returns a survey submission matching the submission ID.", response = SurveySubmissionWithSkillRating.class, tags={ "surveySubmission", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Survey submission associated with the survey submission resource ID", response = SurveySubmissionWithSkillRating.class),
        @ApiResponse(code = 404, message = "An survey submission matching the given submission ID was not found.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/surveySubmission/{surveySubmissionId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SurveySubmissionWithSkillRating> getSurveySubmissionById(@ApiParam(value = "ID of the surveyGroup as a GUID.", required = true) @PathVariable("surveySubmissionId") UUID surveySubmissionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ratings\" : [ { \"skill\" : \"{}\", \"rating\" : 0, \"id\" : \"f1ad7649-eb70-4499-9c82-a63fe2c6dc71\" }, { \"skill\" : \"{}\", \"rating\" : 0, \"id\" : \"f1ad7649-eb70-4499-9c82-a63fe2c6dc71\" } ], \"surveyGroup\" : \"{}\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /surveySubmission/surveyGroup/{surveyGroupId} : Fetch the survey submissions associated with the Survey Group.
     * Returns all survey submissions that are part of the SurveyGroup.
     *
     * @param surveyGroupId ID of the surveyGroup as a GUID. (required)
     * @return Survey submissions associated with the Survey Group resource ID (status code 200)
     *         or Survey submissions matching the given Survey Group ID were not found. (status code 404)
     */
    @ApiOperation(value = "Fetch the survey submissions associated with the Survey Group.", nickname = "getSurveySubmissionsBySurveyGroupId", notes = "Returns all survey submissions that are part of the SurveyGroup.", response = SurveySubmission.class, responseContainer = "List", tags={ "surveySubmission", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Survey submissions associated with the Survey Group resource ID", response = SurveySubmission.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Survey submissions matching the given Survey Group ID were not found.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/surveySubmission/surveyGroup/{surveyGroupId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<SurveySubmission>> getSurveySubmissionsBySurveyGroupId(@ApiParam(value = "ID of the surveyGroup as a GUID.", required = true) @PathVariable("surveyGroupId") UUID surveyGroupId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"feedback\" : \"John was a pleasure to work with and extremely knowledgeable in REST.\", \"submissionStatus\" : \"Complete\", \"surveyAuthor\" : \"{}\", \"submissionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"f1ad7649-eb70-4499-9c82-a63fe2c6dc71\", \"surveySubject\" : \"{}\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /surveySubmission/{surveySubmissionId} : Update a survey Submission in Feedback 360 Survey API. 
     * This representation of the survey submission contained in this request will replace  the survey submission located at this URI. This operation is idempotent. TODO 
     *
     * @param surveySubmissionId ID of the employee assignment as a GUID. (required)
     * @param surveySubmissionWithSkillRating  (optional)
     * @return The survey submission assignment represented by the supplied GUID has been updated with the contents of this request. (status code 200)
     *         or The survey submission was not updated. Something is wrong with the request like a missing required field. (status code 400)
     */
    @ApiOperation(value = "Update a survey Submission in Feedback 360 Survey API. ", nickname = "updateSurveySubmissionByID", notes = "This representation of the survey submission contained in this request will replace  the survey submission located at this URI. This operation is idempotent. TODO ", response = SurveySubmissionEntity.class, tags={ "surveySubmission", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The survey submission assignment represented by the supplied GUID has been updated with the contents of this request.", response = SurveySubmissionEntity.class),
        @ApiResponse(code = 400, message = "The survey submission was not updated. Something is wrong with the request like a missing required field.") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/surveySubmission/{surveySubmissionId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SurveySubmissionEntity> updateSurveySubmissionByID(@ApiParam(value = "ID of the employee assignment as a GUID.", required = true) @PathVariable("surveySubmissionId") UUID surveySubmissionId,@ApiParam(value = "") @Valid @RequestBody(required = false) SurveySubmissionWithSkillRating surveySubmissionWithSkillRating) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"surveySubjectEntity\" : \"{}\", \"ratings\" : [ null, null ], \"surveyAuthorEntity\" : \"{}\", \"disabled\" : false, \"surveyGroup\" : \"{}\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
