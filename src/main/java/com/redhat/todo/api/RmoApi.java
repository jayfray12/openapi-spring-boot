/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.redhat.todo.api;

import com.redhat.todo.model.EmployeeAggregateSkillRatings;
import com.redhat.todo.model.EmployeeSkillHistory;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-24T17:30:20.735351-05:00[America/New_York]")
@Validated
@Api(value = "rmo", description = "the rmo API")
public interface RmoApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /rmo/profile/{employeeId}/aggregateRatings : Find a list ggregate Skill Ratings for each skill that the employee has be rated on 3 or more times.
     * Return a Map&lt;skill,rating&gt; of all the the skills that the employee has been rated on 3 or more times.
     *
     * @param employeeId Kerberos ID of the employee. (required)
     * @return Aggregate Skill Ratings for each skill that the employee has be rated on 3 or more times. (status code 200)
     *         or No skills with more than three ratings were found for the given employee. (status code 404)
     */
    @ApiOperation(value = "Find a list ggregate Skill Ratings for each skill that the employee has be rated on 3 or more times.", nickname = "getEmployeeAggregateSkillRatings", notes = "Return a Map<skill,rating> of all the the skills that the employee has been rated on 3 or more times.", response = EmployeeAggregateSkillRatings.class, responseContainer = "List", tags={ "RMOUserProfile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Aggregate Skill Ratings for each skill that the employee has be rated on 3 or more times.", response = EmployeeAggregateSkillRatings.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No skills with more than three ratings were found for the given employee.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rmo/profile/{employeeId}/aggregateRatings",
        produces = { "application/json" }
    )
    default ResponseEntity<List<EmployeeAggregateSkillRatings>> getEmployeeAggregateSkillRatings(@ApiParam(value = "Kerberos ID of the employee.", required = true) @PathVariable("employeeId") String employeeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"skill\" : \"Spring\", \"rating\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rmo/profile/{employeeId}/skills : Find a list of all the project and corresponding skills associated with an employee.
     * Return a Map&lt;project,skills&gt; of all the projects an employee is part of and a list of skills that the employee used at each project.
     *
     * @param employeeId Kerberos ID of the employee. (required)
     * @return A list of all the project and corresponding skills associated with an employee. (status code 200)
     *         or No projects were found for the given employee. (status code 404)
     */
    @ApiOperation(value = "Find a list of all the project and corresponding skills associated with an employee.", nickname = "getEmployeeSkillsHistory", notes = "Return a Map<project,skills> of all the projects an employee is part of and a list of skills that the employee used at each project.", response = EmployeeSkillHistory.class, responseContainer = "List", tags={ "RMOUserProfile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of all the project and corresponding skills associated with an employee.", response = EmployeeSkillHistory.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No projects were found for the given employee.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rmo/profile/{employeeId}/skills",
        produces = { "application/json" }
    )
    default ResponseEntity<List<EmployeeSkillHistory>> getEmployeeSkillsHistory(@ApiParam(value = "Kerberos ID of the employee.", required = true) @PathVariable("employeeId") String employeeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"skills\" : [ \"Spring\", \"Spring\" ], \"project\" : \"Bank of America\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
