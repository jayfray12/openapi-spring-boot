/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.redhat.todo.api;

import com.redhat.todo.model.Employee;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-24T17:30:20.735351-05:00[America/New_York]")
@Validated
@Api(value = "userprofile", description = "the userprofile API")
public interface UserprofileApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /userprofile
     * For the currently authenticated user, return the user profile information
     *
     * @return The available user information (status code 200)
     */
    @ApiOperation(value = "", nickname = "getUserProfile", notes = "For the currently authenticated user, return the user profile information", response = Employee.class, tags={ "userProfile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The available user information", response = Employee.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/userprofile",
        produces = { "application/json" }
    )
    default ResponseEntity<Employee> getUserProfile() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"Consultant\", \"dateTermsAccepted\" : \"2021-02-09T00:00:00.000+0000\", \"name\" : \"John Smith\", \"termsVersionNumber\" : 1.0, \"id\" : \"jsmith@redhat.com\", \"hasAcceptedTerms\" : false, \"email\" : \"jsmith@redhat.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /userprofile : Update the user profile resource 
     * The representation of the user profile contained in this request will replace the user profile. This operation is idempotent. 
     *
     * @param employee  (optional)
     * @return The user profile has been updated with the contents of this request. (status code 200)
     *         or The user profile was not updated. Something is wrong with the request like a missing required field. (status code 400)
     *         or This user profile was not found (status code 404)
     */
    @ApiOperation(value = "Update the user profile resource ", nickname = "updateUserProfile", notes = "The representation of the user profile contained in this request will replace the user profile. This operation is idempotent. ", response = Employee.class, tags={ "userProfile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The user profile has been updated with the contents of this request.", response = Employee.class),
        @ApiResponse(code = 400, message = "The user profile was not updated. Something is wrong with the request like a missing required field."),
        @ApiResponse(code = 404, message = "This user profile was not found") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/userprofile",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Employee> updateUserProfile(@ApiParam(value = "") @Valid @RequestBody(required = false) Employee employee) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"Consultant\", \"dateTermsAccepted\" : \"2021-02-09T00:00:00.000+0000\", \"name\" : \"John Smith\", \"termsVersionNumber\" : 1.0, \"id\" : \"jsmith@redhat.com\", \"hasAcceptedTerms\" : false, \"email\" : \"jsmith@redhat.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
