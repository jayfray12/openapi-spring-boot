/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.redhat.todo.api;

import com.redhat.todo.model.Employee;
import com.redhat.todo.model.EmployeeAssignmentWithSurveyGroup;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-24T17:30:20.735351-05:00[America/New_York]")
@Validated
@Api(value = "employee", description = "the employee API")
public interface EmployeeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /employee/{employeeId} : Find an Employee resource by ID
     * Returns a single employee matching the given ID.
     *
     * @param employeeId Kerberos ID of the employee. (required)
     * @return A representation of the employee matching the given employeeId. (status code 200)
     *         or An employee matching the given employeeId was not found. (status code 404)
     */
    @ApiOperation(value = "Find an Employee resource by ID", nickname = "getEmployeeById", notes = "Returns a single employee matching the given ID.", response = Employee.class, tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A representation of the employee matching the given employeeId.", response = Employee.class),
        @ApiResponse(code = 404, message = "An employee matching the given employeeId was not found.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employee/{employeeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Employee> getEmployeeById(@ApiParam(value = "Kerberos ID of the employee.", required = true) @PathVariable("employeeId") String employeeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"Consultant\", \"dateTermsAccepted\" : \"2021-02-09T00:00:00.000+0000\", \"name\" : \"John Smith\", \"termsVersionNumber\" : 1.0, \"id\" : \"jsmith@redhat.com\", \"hasAcceptedTerms\" : false, \"email\" : \"jsmith@redhat.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employee : List all employees available in the Feedback 360 Survey API.
     * This operation fetches a full list of employees available in the Feedback 360 Survey API.  The filtering and sorting mechanism for fetching this list is yet To Be Determined.  The Employees in the Feedback 360 Survey API data store will be populated from outside resources such as LDAP or Rover. 
     *
     * @param filterBy Field by which to filter results. (optional)
     * @param filter String to filter on, query string (optional)
     * @param sortBy Field by which to sort (optional)
     * @param sortOrder Sort Order (optional)
     * @param offset Page offset (optional)
     * @param maxResults Maximum number of results to return, defaults to 20 (optional)
     * @return A list resource collection of Employees. (status code 200)
     */
    @ApiOperation(value = "List all employees available in the Feedback 360 Survey API.", nickname = "getEmployees", notes = "This operation fetches a full list of employees available in the Feedback 360 Survey API.  The filtering and sorting mechanism for fetching this list is yet To Be Determined.  The Employees in the Feedback 360 Survey API data store will be populated from outside resources such as LDAP or Rover. ", response = Employee.class, responseContainer = "List", tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list resource collection of Employees.", response = Employee.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employee",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Employee>> getEmployees(@ApiParam(value = "Field by which to filter results.") @Valid @RequestParam(value = "filterBy", required = false) String filterBy,@ApiParam(value = "String to filter on, query string") @Valid @RequestParam(value = "filter", required = false) String filter,@ApiParam(value = "Field by which to sort") @Valid @RequestParam(value = "sortBy", required = false) String sortBy,@ApiParam(value = "Sort Order", allowableValues = "ASC, DESC") @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder,@ApiParam(value = "Page offset") @Valid @RequestParam(value = "offset", required = false) Integer offset,@ApiParam(value = "Maximum number of results to return, defaults to 20") @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"Consultant\", \"dateTermsAccepted\" : \"2021-02-09T00:00:00.000+0000\", \"name\" : \"John Smith\", \"termsVersionNumber\" : 1.0, \"id\" : \"jsmith@redhat.com\", \"hasAcceptedTerms\" : false, \"email\" : \"jsmith@redhat.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employee/{employeeId}/surveyGroups : Find an all Survey Groups an employee is part of resource by ID
     * Returns a List of Survey Groups matching the given employee ID.
     *
     * @param employeeId Employee&#39;s RedHat Kerberos ID. (required)
     * @return A List of Survey Groups matching the given employeeId. (status code 200)
     *         or An employee matching the given employeeId was not found. (status code 404)
     */
    @ApiOperation(value = "Find an all Survey Groups an employee is part of resource by ID", nickname = "getSurveyGroupByEmployeeId", notes = "Returns a List of Survey Groups matching the given employee ID.", response = EmployeeAssignmentWithSurveyGroup.class, responseContainer = "List", tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A List of Survey Groups matching the given employeeId.", response = EmployeeAssignmentWithSurveyGroup.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "An employee matching the given employeeId was not found.") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employee/{employeeId}/surveyGroups",
        produces = { "application/json" }
    )
    default ResponseEntity<List<EmployeeAssignmentWithSurveyGroup>> getSurveyGroupByEmployeeId(@ApiParam(value = "Employee's RedHat Kerberos ID.", required = true) @PathVariable("employeeId") String employeeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"billableRole\" : \"billableRole\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /employee/{employeeId} : Update an Employee resource by ID 
     * The representation of the employee contained in this request will replace the employee located at this URI. This operation is idempotent. 
     *
     * @param employeeId Kerberos ID of the employee. (required)
     * @param employee  (optional)
     * @return The employee represented by the supplied userid has been updated with the contents of this request. (status code 200)
     *         or The employee was not updated. Something is wrong with the request like a missing required field. (status code 400)
     *         or This employee was not found (status code 404)
     */
    @ApiOperation(value = "Update an Employee resource by ID ", nickname = "updateEmployeeByID", notes = "The representation of the employee contained in this request will replace the employee located at this URI. This operation is idempotent. ", response = Employee.class, tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The employee represented by the supplied userid has been updated with the contents of this request.", response = Employee.class),
        @ApiResponse(code = 400, message = "The employee was not updated. Something is wrong with the request like a missing required field."),
        @ApiResponse(code = 404, message = "This employee was not found") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/employee/{employeeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Employee> updateEmployeeByID(@ApiParam(value = "Kerberos ID of the employee.", required = true) @PathVariable("employeeId") String employeeId,@ApiParam(value = "") @Valid @RequestBody(required = false) Employee employee) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"Consultant\", \"dateTermsAccepted\" : \"2021-02-09T00:00:00.000+0000\", \"name\" : \"John Smith\", \"termsVersionNumber\" : 1.0, \"id\" : \"jsmith@redhat.com\", \"hasAcceptedTerms\" : false, \"email\" : \"jsmith@redhat.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
