openapi: 3.0.0
info:
  title: Feedback 360 Survey API
  version: 2.0.0
  description: |
    This API specification contains information around the Feedback 360 Survey
    API developed by the App Dev Practice.

    The Feedback 360 Survey API enables the management of feedback surveys for
    customer engagements. A feedback survey is N/A to 5 point scale of competency around
    the technologies used for a project. Each added employee will be able to enhance the
    survey by adding technologies, softskills, and freetext for each of his or her
    colleagues. The will enable Red Hat to better understand multiple aspects of
    a consultant's skillset.
  contact:
    email: appdevpractice@redhat.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: employee
  - name: surveyGroup
  - name: skills
  - name: surveySubmission
  - name: userProfile
servers:
  - url: "http://localhost:3007"
    description: LOCAL
  - url: "http://survey-service-consultant-360-dev.apps.shared-dev.dev.openshift.opentlc.com"
    description: Spring Boot Service that implements the Feedback 360 Survey API on DEV Cluster
  - url: "http://survey-service-consultant-360-prod.apps.shared-dev.dev.openshift.opentlc.com"
    description: Spring Boot Service that implements the Feedback 360 Survey API on PROD Cluster
paths:
  /surveygroups:
    get:
      tags:
        - surveyGroup
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SurveyGroup"
          description: A list of survey groups is returned. The Survey Group object returned will not have the Employee Assignments or Default Skills hydrated.
      operationId: getAllSurveyGroups
      summary: Get all survey groups from Feedback 360 Survey API.
      description: |
        Get all survey groups in Feedback 360 Survey API.
    post:
      requestBody:
        description: A new survey group resource contained in the request body.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SurveyGroup"
        required: true
      tags:
        - surveyGroup
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SurveyGroup"
          headers:
            location:
              schema:
                type: string
              example: "http://api.server.com/projects/f9238beb-9649-4983-9059-4f0ee372d56e"
              description: The URI of the survey group resource that was just created.
          description: >-
            The survey group was successfully created. The location of the new survey group
            resource is in the location header of the response.
        "400":
          description: The survey group contained in the request body is invalid.
        "401":
          description: The survey group cannot be created because the user has not been authorized.
        "409":
          description: The survey group matching the details already exists.
      operationId: createSurveyGroup
      summary: Create a new survey group in the Feedback 360 Survey API.
      description: >
        A survey group is the starting point for creating a Feedback 360 Survey. A survey group
        contains the project information, list of employees on the project that will receive the
        survey, and a list of technologies used on the project.
  "/surveygroups/{surveyGroupId}":
    get:
      tags:
        - surveyGroup
      parameters:
        - examples:
            GUID:
              value: '"08bb3e66-8562-11ea-9325-b78f2fb687bf"'
            GUID1:
              value: '"1be550b2-8562-11ea-8472-a79387e009b6"'
            GUID2:
              value: '"1be5db9a-8562-11ea-9e63-6f41b6cb1594"'
            GUID3:
              value: '"1be65b2e-8562-11ea-b3f3-4b445ce3dd26"'
            GUID4:
              value: '"1be6e35a-8562-11ea-a6b6-7b0bee9af2fd"'
            GUID5:
              value: '"1be76d70-8562-11ea-b47e-8ba65ab4185f"'
            GUID6:
              value: '"1be7ee4e-8562-11ea-bae7-2fc8cdbc3d29"'
          name: surveyGroupId
          description: ID of the survey group as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SurveyGroup"
          description: A representation of the survey group matching the given surveyGroupID.
        "400":
          description: "Id must be formatted as a UUID "
        "401":
          description: >-
            The Survey Group matching the given surveyGroupId has been disabled.  Please contact
            the Project Manager for more information"
        "404":
          description: A survey group matching the given surveyGroupId was not found.
      operationId: getSurveyGroupById
      summary: Find a survey group resource by ID
      description: Returns a single survey group matching the given ID.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SurveyGroup"
      tags:
        - surveyGroup
      parameters:
        - name: surveyGroupId
          description: ID of the survey group as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "200":
          description: >-
            The survey group represented by the supplied GUID has been updated with the contents
            of this request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SurveyGroup"
        "400":
          description: >-
            The survey group was not updated. Something is wrong with the request like a missing
            required field.
        "404":
          description: This surveygroup was not found
      operationId: updateSurveyGroupByID
      summary: |
        Update a Survey Group in Feedback 360 Survey API.
      description: >
        This representation of the survey group contained in this request will replace  the survey
        group located at this URI. This operation is idempotent.
    delete:
      tags:
        - surveyGroup
      parameters:
        - name: surveyGroupId
          description: ID of the survey group as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "204":
          description: The survey group represented by the supplied GUID is deleted from the system.
      operationId: deleteSurveyGroupByID
      summary: Disable a survey group from Feedback 360 Survey API.
      description: >
        This operation will delete an entire survey group and all child resources  associated with it.
        This operation is idempotent.
  "/surveygroups/{surveyGroupId}/submissions":
    get:
      tags:
        - surveyGroup
      parameters:
        - name: surveyGroupId
          description: ID of the survey group as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SurveySubmission"
          description: >-
            A list of the feedback submission resources for a survey group. An empty list is valid
            if the survey group does not have any submissions.
        "404":
          description: The survey group given by the surveyGroupId does not exist.
      operationId: getSurveyGroupSubmissions
      summary: Find all submissions associated to a survey group.
      description: |
        A submission contains all the ratings for the skills for a colleague receiving feedback.
        This operation will return all submissions submitted for a survey group. An empty
        resource collection is a valid response and indicates no feedback has been
        submitted.
  "/surveygroups/{surveyGroupId}/defaultSkill":
    put:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                description: Id of the Skill
                type: string
                format: uuid
                example: f9238beb-9649-4983-9059-4f0ee372d56e
      tags:
        - surveyGroup
      parameters:
        - name: surveyGroupId
          description: ID of the survey group as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "200":
          description: >-
            The survey group represented by the supplied GUID has been updated with the contents
            of this request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SurveyGroupEntity"
        "400":
          description: >-
            The survey group was not updated. Something is wrong with the request like a missing
            required field.
      operationId: updateDefaultSkills
      summary: |
        Update the default skills for a survey group.
      description: >
        When a default skill is added to a survey group all survey submissions created for the survey
        group will include the default skill.
    post:
      requestBody:
        description: An array of skillIds contained in the request body.
        content:
          application/json:
            schema:
              type: array
              items:
                description: Id of the Skill
                type: string
                format: uuid
                example: f9238beb-9649-4983-9059-4f0ee372d56e
        required: true
      tags:
        - surveyGroup
      parameters:
        - name: surveyGroupId
          description: ID of the survey group as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "201":
          headers:
            location:
              schema:
                type: string
              example: "http://api.server.com/projects/f9238beb-9649-4983-9059-4f0ee372d56e"
              description: The URI of the survey group resource that was just created for.
          description: The Default Skills were successfully created.
        "400":
          description: The Skills or Survey Group contained in the request body are invalid.
        "401":
          description: >-
            The Skills or Survey Group cannot be created because the user have not been
            authorized.
        "409":
          description: The Skills and Survey Group matching the details already exist.
      operationId: addDefaultSkill
      summary: Add a default skill to a survey group.
      description: >
        When a default skill is added to a survey group all survey submissions created for the survey
        group will include the default skill.
  "/surveygroups/{surveyGroupId}/defaultSkill/{defaultSkillId}":
    delete:
      tags:
        - surveyGroup
      parameters:
        - name: surveyGroupId
          description: ID of the survey group as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
        - name: defaultSkillId
          description: ID of the Default Skill as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238bea-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "204":
          description: The Default Skill has been removed from the survey group.
      operationId: deleteDefaultSkill
      summary: Delete default skills for a Survey Group.
      description: |
        This operation will delete the given default skill from the survey group.
  /employee:
    get:
      tags:
        - employee
      parameters:
        - name: filterBy
          description: Field by which to filter results.
          in: query
          schema:
            type: string
          example: name
        - name: filter
          description: String to filter on, query string
          in: query
          schema:
            type: string
          example: Frank
        - name: sortBy
          description: Field by which to sort
          in: query
          schema:
            type: string
        - name: sortOrder
          description: Sort Order
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: offset
          description: Page offset
          schema:
            type: integer
            format: int32
          in: query
        - name: maxResults
          description: Maximum number of results to return, defaults to 20
          schema:
            type: integer
            format: int32
          example: 20
          in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Employee"
          description: A list resource collection of Employees.
      operationId: getEmployees
      summary: List all employees available in the Feedback 360 Survey API.
      description: >
        This operation fetches a full list of employees available in the Feedback 360 Survey API.  The
        filtering and sorting mechanism for fetching this list is yet To Be Determined.  The Employees
        in the Feedback 360 Survey API data store will be populated from outside resources such as
        LDAP or Rover.
  "/employee/{employeeId}":
    get:
      tags:
        - employee
      parameters:
        - name: employeeId
          description: Kerberos ID of the employee.
          schema:
            type: string
            example: ajones
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
          description: A representation of the employee matching the given employeeId.
        "404":
          description: An employee matching the given employeeId was not found.
      operationId: getEmployeeById
      summary: Find an Employee resource by ID
      description: Returns a single employee matching the given ID.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      tags:
        - employee
      parameters:
        - name: employeeId
          description: Kerberos ID of the employee.
          schema:
            type: string
            example: ajones
          in: path
          required: true
      responses:
        "200":
          description: >-
            The employee represented by the supplied userid has been updated with the contents
            of this request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "400":
          description: >-
            The employee was not updated. Something is wrong with the request like a missing
            required field.
        "404":
          description: This employee was not found
      operationId: updateEmployeeByID
      summary: |
        Update an Employee resource by ID
      description: >
        The representation of the employee contained in this request will replace the employee
        located at this URI. This operation is idempotent.
  "/surveySubmission/{surveySubmissionId}":
    get:
      tags:
        - surveySubmission
      parameters:
        - name: surveySubmissionId
          description: ID of the surveyGroup as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SurveySubmissionWithSkillRating"
          description: Survey submission associated with the survey submission resource ID
        "404":
          description: An survey submission matching the given submission ID was not found.
      operationId: getSurveySubmissionById
      summary: Fetch the survey submission associated with the survey submission resource ID
      description: Returns a survey submission matching the submission ID.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SurveySubmissionWithSkillRating"
      tags:
        - surveySubmission
      parameters:
        - name: surveySubmissionId
          description: ID of the employee assignment as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "200":
          description: >-
            The survey submission assignment represented by the supplied GUID has been updated
            with the contents of this request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SurveySubmissionEntity"
        "400":
          description: >-
            The survey submission was not updated. Something is wrong with the request like a
            missing required field.
      operationId: updateSurveySubmissionByID
      summary: |
        Update a survey Submission in Feedback 360 Survey API.
      description: >
        This representation of the survey submission contained in this request will replace  the
        survey submission located at this URI. This operation is idempotent. TODO
    delete:
      tags:
        - surveySubmission
      parameters:
        - name: surveySubmissionId
          description: ID of the survey submission as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "204":
          description: The survey submission represented by the supplied GUID is disabled.
      operationId: disableSurveySubmission
      summary: Disable a surveySubmission from Feedback 360 Survey API.
      description: >
        This operation will disable a survey submission and all child resources  associated with it.
        This operation is idempotent.
  "/surveySubmission/reviewedBy/{employeeId}":
    get:
      tags:
        - surveySubmission
      parameters:
        - name: employeeId
          description: Employee's RedHat Kerberos ID.
          schema:
            type: string
            example: ajones
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SurveySubmission"
          description: Survey submissions associated with the survey submission resource ID
        "404":
          description: Survey submissions matching the given employee ID were not found.
      operationId: getReviewedByByEmployeeId
      summary: Fetch the survey submissions reviewed by the given employee Id.
      description: Returns all survey submissions that have been reviewed by the employee ID.
  "/surveySubmission/reviewedOn/{employeeId}":
    get:
      tags:
        - surveySubmission
      parameters:
        - name: employeeId
          description: Employee's RedHat Kerberos ID.
          schema:
            type: string
            example: ajones
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SurveySubmission"
          description: Survey submissions associated that the employee was reviewed on.
        "404":
          description: Survey submissions matching the given employee ID were not found.
      operationId: getReviewedOnByEmployeeId
      summary: Fetch the survey submissions that the given employee Id was reviewed on.
      description: Returns all survey submissions that the employee has been reviewed on.
  "/surveySubmission/surveyGroup/{surveyGroupId}":
    get:
      tags:
        - surveySubmission
      parameters:
        - name: surveyGroupId
          description: ID of the surveyGroup as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SurveySubmission"
          description: Survey submissions associated with the Survey Group resource ID
        "404":
          description: Survey submissions matching the given Survey Group ID were not found.
      operationId: getSurveySubmissionsBySurveyGroupId
      summary: Fetch the survey submissions associated with the Survey Group.
      description: Returns all survey submissions that are part of the SurveyGroup.
  /skills:
    get:
      tags:
        - skills
      parameters:
        - name: filterBy
          description: Field by which to filter
          in: query
          schema:
            type: string
          example: skill
        - name: filterString
          description: String to filter on, query string
          in: query
          schema:
            type: string
          example: Openshift
        - name: sortBy
          description: Field by which to sort
          in: query
          schema:
            type: string
        - name: sortOrder
          description: Sort Order
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: offset
          description: Page offset
          schema:
            type: integer
            format: int32
          in: query
        - name: maxResults
          description: Maximum number of results to return, defaults to 20
          schema:
            type: integer
            format: int32
          example: 20
          in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Skill"
          description: List of Skills that are available.
      operationId: getAllSkills
      summary: Fetch all the skills available to be added on a survey submission.
      description: Returns all skills that are active in the Skills table.
  "/surveygroups/{surveyGroupId}/assignment":
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeAssignmentWithEmployee"
          description: Get a list of employees assigned to a survey group
      operationId: getEmployeesBySurveyGroup
      summary: Get list of assigned employees for a given survey group
      description: |-
        This request will return an array of Employee objects which are associated with
        a particular survey group.
      tags:
        - surveyGroup
    parameters:
      - name: surveyGroupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
  "/surveygroups/{surveyGroupId}/assignment/{employeeId}":
    post:
      parameters:
        - examples:
            GUID:
              value: '"1bea1106-8562-11ea-aee6-7721eaea325b"'
          name: surveyGroupId
          schema:
            type: string
            format: uuid
          in: path
          required: true
        - name: employeeId
          schema:
            type: string
          in: path
          required: true
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeAssignment"
      tags:
        - surveyGroup
      responses:
        "200":
          description: The employee was associated with the survey group successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeAssignment"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
          description: Validations failed for the Employee Assignment.
        "401":
          description: |-
            The currently authenticated user is not authorized to associated employees
            with survey groups.
        "404":
          description: Either the employee GUID or the survey group GUID were not found
      operationId: assignEmployeeToSurveyGroup
      summary: Assign an employee under their GUID to a survey group
      description: Assign an employee under their GUID to a survey group
    put:
      parameters:
        - examples:
            GUID:
              value: '"1bea1106-8562-11ea-aee6-7721eaea325b"'
          name: surveyGroupId
          schema:
            type: string
            format: uuid
          in: path
          required: true
        - name: employeeId
          examples:
            consultant:
              value: "ajones"
            architect:
              value: "wendy"
          schema:
            type: string
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeAssignment"
      tags:
        - surveyGroup
      responses:
        "200":
          description: The employee assignment was updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeAssignment"
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
          description: Validations failed for the Employee Assignment.
        "401":
          description: |-
            The currently authenticated user is not authorized to associated employees
            with survey groups.
        "404":
          description: Either the employee ID or the survey group GUID were not found
      operationId: updateEmployeeAssignment
      summary: Allows for updating start/end date and perhaps role for an existing assignment
      description: Allows for updating start/end date and perhaps role f
    delete:
      parameters:
        - examples:
            GUID:
              value: '"1bea1106-8562-11ea-aee6-7721eaea325b"'
          name: surveyGroupId
          schema:
            type: string
            format: uuid
          in: path
          required: true
        - examples:
            GUID:
              value: '"1bea1106-8562-11ea-aee6-7721eaea325b"'
          name: employeeId
          schema:
            type: string
          in: path
          required: true
      tags:
        - surveyGroup
      responses:
        "204":
          description: The employee ID was successfully dissociated from the survey group
        "404":
          description: The specified employee ID or survey group ID was not found
      operationId: removeEmployeeAssignment
      summary: Remove an employee association with a survey group
      description: Remove an employee association with a survey group
    parameters:
      - name: employeeId
        in: path
        required: true
        schema:
          type: string
  "/employee/{employeeId}/surveyGroups":
    get:
      tags:
        - employee
      parameters:
        - name: employeeId
          description: Employee's RedHat Kerberos ID.
          schema:
            type: string
            example: ajones
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeAssignmentWithSurveyGroup"
          description: A List of Survey Groups matching the given employeeId.
        "404":
          description: An employee matching the given employeeId was not found.
      operationId: getSurveyGroupByEmployeeId
      summary: Find an all Survey Groups an employee is part of resource by ID
      description: Returns a List of Survey Groups matching the given employee ID.
  "/surveygroups/{surveyGroupId}/createSurveySubmissions":
    post:
      tags:
        - surveySubmission
      parameters:
        - name: surveyGroupId
          description: ID of the survey group as a GUID.
          schema:
            type: string
            format: uuid
            example: f9238beb-9649-4983-9059-4f0ee372d56e
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Employee"
          description: The survey submissions were successfully created and a List of Employees in which surveys where created for is returned.
        "400":
          description: The survey group contained in the request is invalid.
        "401":
          description: The survey submission cannot be created because the user has not been authorized.
      operationId: createSurveySubmissions
      summary: Create a batch of SurveySubmissions for a survey group in the Feedback 360 Survey API.
      description: Returns a List of Employees in which surveys where created.
  /userprofile:
    get:
      operationId: getUserProfile
      description: For the currently authenticated user, return the user profile information
      tags:
        - userProfile
      responses:
        "200":
          description: The available user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      tags:
        - userProfile
      responses:
        "200":
          description: >-
            The user profile has been updated with the contents of this request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "400":
          description: >-
            The user profile was not updated. Something is wrong with the request like a missing
            required field.
        "404":
          description: This user profile was not found
      operationId: updateUserProfile
      summary: |
        Update the user profile resource
      description: >
        The representation of the user profile contained in this request will replace the user
        profile. This operation is idempotent.
  /usageagreement:
    get:
      operationId: getUsageAgreement
      description: The latest usage agreement
      tags:
        - usageAgreement
      responses:
        "200":
          description: The content of the usage agreement.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsageAgreement"
  "/rmo/profile/{employeeId}/skills":
    get:
      tags:
        - RMOUserProfile
      parameters:
        - name: employeeId
          description: Kerberos ID of the employee.
          schema:
            type: string
            example: ajones
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array 
                items:
                  $ref: "#/components/schemas/EmployeeSkillHistory"
          description: A list of all the project and corresponding skills associated with an employee.
        "404":
          description: No projects were found for the given employee.
      operationId: getEmployeeSkillsHistory
      summary: Find a list of all the project and corresponding skills associated with an employee.
      description: Return a Map<project,skills> of all the projects an employee is part of and a list of skills that the employee used at each project.
  "/rmo/profile/{employeeId}/aggregateRatings":
    get:
      tags:
        - RMOUserProfile
      parameters:
        - name: employeeId
          description: Kerberos ID of the employee.
          schema:
            type: string
            example: ajones
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeAggregateSkillRatings"
          description: Aggregate Skill Ratings for each skill that the employee has be rated on 3 or more times.
        "404":
          description: No skills with more than three ratings were found for the given employee.
      operationId: getEmployeeAggregateSkillRatings
      summary: Find a list ggregate Skill Ratings for each skill that the employee has be rated on 3 or more times.
      description: Return a Map<skill,rating> of all the the skills that the employee has been rated on 3 or more times.
components:
  schemas:
    EmployeeEntity:
      type: object
      x-java-class-annotations:
        - "@javax.persistence.Entity"
        - |-
          @javax.persistence.Table(
            name = "employees",
            uniqueConstraints = {
              @javax.persistence.UniqueConstraint(columnNames = {"email"})
            }
          )
      allOf:
        - $ref: "#/components/schemas/Employee"
      properties:
        assignments:
          description: Projects for which the employee has been assigned to a SurveyGroup
          items:
            $ref: "#/components/schemas/EmployeeAssignment"
          type: array
          x-java-field-annotations:
            - '@javax.persistence.OneToMany(mappedBy = "employee")'
    Employee:
      type: object
      x-java-class-annotations:
        - "@javax.persistence.MappedSuperclass"
      x-tablename: employees
      properties:
        id:
          description: Employee's RedHat Kerberos ID
          type: string
          example: jsmith@redhat.com
          x-java-field-annotations:
            - "@javax.persistence.Id"
          x-primary-key: true
        name:
          description: Name of the employee.
          type: string
          example: John Smith
        email:
          description: The email address of the employee.
          type: string
          example: jsmith@redhat.com
          x-java-field-annotation:
            - |-
              "@org.hibernate.annotations.Formula("CONCAT(id, '@redhat.com')")"
        role:
          description: "The role of the employee. For example, consultant, PM, TSM, etc."
          type: string
          example: Consultant
        hasAcceptedTerms:
          description: Whether the employee has accepted the terms of the usage agreement.
          type: boolean
          example: false
          x-java-field-annotations:
            - "@javax.persistence.Transient"
        dateTermsAccepted:
          description: The date the employee accepted the terms of the usage agreement.
          type: string
          format: date
          example: "2021-02-09"
        termsVersionNumber:
          description: The version number of terms of the usage agreement.
          type: number
          format: float
          example: 1.0
    EmployeeAssignmentWithSurveyGroup:
      type: object
      allOf:
        - $ref: "#/components/schemas/SurveyGroup"
      properties:
        startDate:
          description: The start date of this employee's assignment
          type: string
          format: date-time
        endDate:
          description: The end date of this employee's assignment
          type: string
          format: date-time
        billableRole:
          type: string
          description: The billing role that is assigned for the project (May not match actual title)
          # enum:
          # - Associate Consultant
          # - Consultant
          # - Senior Consultant
          # - Architect
          # - Principal Consultant
          # - Senior Architect
          # - Principal Architect
          # - Distinguished Consultant
          # - Distinguished Architect
          # - Project Manager
    SurveyGroupEntity:
      required:
        - opportunityId
        - projectName
        - projectCreatorId
        - tsmId
      type: object
      allOf:
        - $ref: "#/components/schemas/SurveyGroup"
      x-java-class-annotations:
        - "@javax.persistence.Entity"
        - '@javax.persistence.Table(name = "survey_groups")'
      properties:
        assignments:
          type: array
          x-java-field-annotations:
            - "@javax.persistence.OneToMany"
            - '@javax.persistence.JoinColumn(name = "survey_group_id")'
          items:
            $ref: "#/components/schemas/EmployeeAssignment"
        disabled:
          description: A flag indicating if this Survey Group is disabled
          type: boolean
          x-java-field-annotations:
            - "@javax.persistence.Column(nullable = false)"
          default: false
          example: false
    SurveyGroup:
      required:
        - opportunityId
        - projectName
        - projectCreatorId
        - tsmId
      type: object
      x-java-class-annotations:
        - "@javax.persistence.MappedSuperclass"
        - "@javax.persistence.EntityListeners(org.springframework.data.jpa.domain.support.AuditingEntityListener.class)"
      properties:
        id:
          description: A GUID that uniquely identifies the SurveyGroup.
          type: string
          format: uuid
          example: f1ad7649-eb70-4499-9c82-a63fe2c6dc71
          x-java-field-annotations:
            - "@javax.persistence.Id"
            - '@javax.persistence.GeneratedValue(generator = "UUID")'
            - '@org.hibernate.annotations.GenericGenerator(name = "UUID", strategy =
              "org.hibernate.id.UUIDGenerator")'
            - '@javax.persistence.Column(name = "id", updatable = false, nullable =
              false)'
        createdDate:
          description: The date the project was created in the Feedback 360 Survey API in UTC.
          type: string
          format: date-time
          readOnly: true
          example: "2020-01-29"
          x-java-field-annotations:
            - "@org.springframework.data.annotation.CreatedDate"
        createdBy:
          description: The employee id (Kerberos) of the user that created the project.
          type: string
          example: janedoe
          x-java-field-annotations:
            - "@org.springframework.data.annotation.CreatedBy"
        modifiedDate:
          description: The date the project was last modified in the Feedback 360 Survey API in UTC.
          type: string
          format: date-time
          readOnly: true
          example: "2020-01-29"
          x-java-field-annotations:
            - "@org.springframework.data.annotation.LastModifiedDate"
        modifiedBy:
          description: The employee id (Kerberos) of the user that last modifed the project.
          type: string
          example: janedoe
          x-java-field-annotations:
            - "@org.springframework.data.annotation.LastModifiedBy"
        opportunityId:
          description: The ID of the Opportunity from PSA.
          type: string
          example: 3456NAS
          x-java-field-annotations:
            - "@javax.persistence.Column(unique = true)"
        projectName:
          description: The name of the project.
          type: string
          example: NASA App Modernization
        projectCreatorId:
          description: The email address of the creator of the project.
          type: string
          example: janedoe@redhat.com
        tsmId:
          description: The email address of the TSM in charge of the project.
          type: string
          example: timmytsm@redhat.com
        defaultSkills:
          type: array
          x-java-field-annotations:
            - "@javax.persistence.ManyToMany"
            - |-
              @javax.persistence.JoinTable(
                  name = "default_survey_skills",
                  joinColumns = @javax.persistence.JoinColumn(name = "survey_group_id"),
                  inverseJoinColumns = @javax.persistence.JoinColumn(name = "skill_id"),
                  uniqueConstraints = @javax.persistence.UniqueConstraint(columnNames = {"survey_group_id", "skill_id"})
              )
          items:
            $ref: "#/components/schemas/Skill"
    Skill:
      type: object
      x-java-class-annotations:
        - "@javax.persistence.Entity"
        - '@javax.persistence.Table(name = "skills")'
      properties:
        id:
          description: A GUID that uniquely identifies a skill.
          type: string
          format: uuid
          example: d567521f-13a6-4237-936c-40bbbf388bc5
          x-java-field-annotations:
            - "@javax.persistence.Id"
            - '@javax.persistence.GeneratedValue(generator = "UUID")'
            - '@org.hibernate.annotations.GenericGenerator(name = "UUID",strategy = "org.hibernate.id.UUIDGenerator")'
            - '@javax.persistence.Column(name = "id", updatable = false, nullable = false)'
        skillsBaseId:
          description: An id from skills base
          type: integer
          example: 1234
        skill:
          description: The name of the skill.
          type: string
          example: Crucial Conversations
        description:
          description: A description of the skill.
          type: string
          example: The ability to have crucial conversations with clients.
          x-java-field-annotations:
            - "@javax.persistence.Column(length=512)"
        category:
          description: The general category of the skill.
          type: string
          example: leadership
        active:
          description: Boolean to state if this skill is active
          type: boolean
          example: true
          default: true
    SurveySubmissionEntity:
      type: object
      allOf:
        - $ref: "#/components/schemas/SurveySubmission"
      x-java-class-annotations:
        - "@javax.persistence.Entity"
        - '@javax.persistence.Table(name = "survey_submissions",
          uniqueConstraints={
          @javax.persistence.UniqueConstraint(columnNames={"survey_group_id", "survey_author_id", "survey_subject_id"})
          })'
      properties:
        surveyGroup:
          description: A GUID that uniquely identifies the project.
          type: object
          x-java-field-annotations:
            - "@javax.persistence.ManyToOne"
            - '@javax.persistence.JoinColumn(name = "survey_group_id")'
          allOf:
            - $ref: "#/components/schemas/SurveyGroupEntity"
        ratings:
          description: SkillRatings for the subject employee
          type: array
          x-java-field-annotations:
            - "@javax.persistence.OneToMany(cascade = javax.persistence.CascadeType.ALL, orphanRemoval=true)"
            - '@javax.persistence.JoinColumn(name = "survey_submission_id")'
          items:
            $ref: "#/components/schemas/SkillRatingEntity"
        surveyAuthorEntity:
          description: The Kerberos Id for the employee that is answering the questions of the survey.
          type: object
          x-java-field-annotations:
            - "@javax.persistence.ManyToOne"
            - '@javax.persistence.JoinColumn(name = "survey_author_id")'
          allOf:
            - $ref: "#/components/schemas/EmployeeEntity"
        surveySubjectEntity:
          description: A Kerberos Id for the employee that is being reviewed.
          type: object
          x-java-field-annotations:
            - "@javax.persistence.ManyToOne"
            - '@javax.persistence.JoinColumn(name = "survey_subject_id")'
          allOf:
            - $ref: "#/components/schemas/EmployeeAssignment"
        disabled:
          description: A flag indicating if this Survey Submission is disabled
          type: boolean
          x-java-field-annotations:
            - "@javax.persistence.Column(nullable = false)"
          default: false
          example: false
    SurveySubmissionWithSkillRating:
      type: object
      allOf:
        - $ref: "#/components/schemas/SurveySubmission"
      properties:
        surveyGroup:
          description: A GUID that uniquely identifies the project.
          type: object
          allOf:
            - $ref: "#/components/schemas/SurveyGroup"
        ratings:
          description: SkillRatings for the subject employee
          type: array
          items:
            $ref: "#/components/schemas/SkillRating"
    SurveySubmission:
      type: object
      x-java-class-annotations:
        - "@javax.persistence.MappedSuperclass"
      properties:
        id:
          description: A GUID that uniquely identifies a survey submitted for a project.
          type: string
          format: uuid
          example: f1ad7649-eb70-4499-9c82-a63fe2c6dc71
          x-java-field-annotations:
            - "@javax.persistence.Id"
            - '@javax.persistence.GeneratedValue(generator = "UUID")'
            - '@org.hibernate.annotations.GenericGenerator(name = "UUID",strategy = "org.hibernate.id.UUIDGenerator")'
            - '@javax.persistence.Column(name = "id", updatable = false, nullable = false)'
        surveyAuthor:
          description: Employee that is reviewing.
          type: object
          x-java-field-annotations:
            - "@javax.persistence.Transient"
          allOf:
            - $ref: "#/components/schemas/Employee"
        surveySubject:
          description: Employee that is being reviewed.
          type: object
          x-java-field-annotations:
            - "@javax.persistence.Transient"
          allOf:
            - $ref: "#/components/schemas/EmployeeAssignment"
        submissionDate:
          description: The date the survey was submitted to the Feedback 360 Survey API in UTC.
          type: string
          format: date-time
          example: "2020-02-29"
        submissionStatus:
          description: Returns a status of "Complete" or "Incomplete"
          type: string
          example: Complete
          enum:
            - Complete
            - Incomplete
        feedback:
          description: Any feedback the author of the survey would like to include in the rating.
          type: string
          example: John was a pleasure to work with and extremely knowledgeable in REST.
    SkillRatingEntity:
      type: object
      x-java-class-annotations:
        - "@javax.persistence.Entity"
        - '@javax.persistence.Table(
          name = "skill_rating",
          uniqueConstraints={
          @javax.persistence.UniqueConstraint(columnNames={"skill_id", "survey_submission_id"})
          })'
      allOf:
        - $ref: "#/components/schemas/SkillRating"
    SkillRating:
      required:
        - skillId
      type: object
      x-java-class-annotations:
        - "@javax.persistence.MappedSuperclass"
      properties:
        id:
          description: A GUID that uniquely identifies a skill rathing.
          type: string
          format: uuid
          example: f1ad7649-eb70-4499-9c82-a63fe2c6dc71
          x-java-field-annotations:
            - "@javax.persistence.Id"
            - '@javax.persistence.GeneratedValue(generator = "UUID")'
            - '@org.hibernate.annotations.GenericGenerator(name = "UUID",strategy = "org.hibernate.id.UUIDGenerator")'
            - '@javax.persistence.Column(name = "id", updatable = false, nullable = false)'
        skill:
          description: A GUID that uniquely identifies a skill.
          type: object
          x-java-field-annotations:
            - "@javax.persistence.ManyToOne"
            - '@javax.persistence.JoinColumn(name = "skill_id", nullable=false)'
          allOf:
            - $ref: "#/components/schemas/Skill"
        rating:
          description: >-
            The rating -1 -> 4 of the skill. -1 - 'Not Applicable', 0 - No Experience, 1 - Foundational, 2 - Experienced, 3 - Advanced, 4 - Expert
          type: integer
          minimum: -1
          maximum: 4
    EmployeeAssignmentWithEmployee:
      type: object
      description: |-
        A type specifically to facilitate the UI. Combines aspects of
        EmployeeAssignment and fields from Employee
      properties:
        id:
          description: The Employee Assignment ID as a GUUID
          type: string
          format: uuid
          example: f1ad7649-eb70-4499-9c82-a63fe2c6dc71
        employeeId:
          description: The Employee Kerboros ID
          type: string
          example: jqConsultant
        name:
          description: Name of the employee.
          type: string
          example: John Smith
        email:
          description: The email address of the employee.
          type: string
          example: jsmith@redhat.com
        startDate:
          description: The start date of this employee's assignment
          type: string
          format: date-time
          example: "2020-02-29"
        endDate:
          description: The end date of this employee's assignment
          type: string
          format: date-time
          example: "2020-02-29"
        billableRole:
          type: string
          description: Role that the employee is billed for on the project.
          # enum:
          # - Associate Consultant
          # - Consultant
          # - Senior Consultant
          # - Architect
          # - Principal Consultant
          # - Senior Architect
          # - Principal Architect
          # - Distinguished Consultant
          # - Distinguished Architect
          # - Project Manager
          example: "Consultant"
        employeeRole:
          type: string
          description: Employee's Red Hat Role.
          # enum:
          # - Associate Consultant
          # - Consultant
          # - Senior Consultant
          # - Architect
          # - Principal Consultant
          # - Senior Architect
          # - Principal Architect
          # - Distinguished Consultant
          # - Distinguished Architect
          # - Project Manager
          example: "Senior Consultant"
      required:
        - startDate
    EmployeeAssignment:
      type: object
      x-java-class-annotations:
        - "@javax.persistence.Entity"
        - '@javax.persistence.Table(
          name = "employee_assignments",
          uniqueConstraints={
          @javax.persistence.UniqueConstraint(columnNames={"employee_id", "survey_group_id"})
          })'
      properties:
        id:
          description: A GUID that uniquely identifies the project.
          type: string
          format: uuid
          example: f9238beb-9649-4983-9059-4f0ee372d56e
          x-java-field-annotations:
            - "@javax.persistence.Id"
            - '@javax.persistence.GeneratedValue(generator = "UUID")'
            - '@org.hibernate.annotations.GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")'
            - '@javax.persistence.Column(name = "id", updatable = false, nullable = false)'
        employee:
          allOf:
            - $ref: "#/components/schemas/EmployeeEntity"
          type: object
          x-java-field-annotations:
            - "@javax.persistence.ManyToOne(cascade = javax.persistence.CascadeType.REMOVE)"
            - '@javax.persistence.JoinColumn(name = "employee_id", nullable=false)'
        surveyGroup:
          description: The unique ID of the SurveyGroup associated with the opportunity.
          type: object
          x-java-field-annotations:
            - "@javax.persistence.ManyToOne"
            - '@javax.persistence.JoinColumn(name = "survey_group_id", nullable=false)'
          allOf:
            - $ref: "#/components/schemas/SurveyGroupEntity"
        startDate:
          description: The date the employee started the project.
          type: string
          format: date-time
          example: "2020-01-29"
        endDate:
          description: The employee's end date on the project.
          type: string
          format: date-time
          example: "2020-01-29"
        billableRole:
          description: Role that the employee is billed for on the project..
          type: string
          example: Consultant
    GenericError:
      type: object
      properties:
        message:
          description: Specific error message
          type: string
        rootCause:
          description: Optional root rootCause
          type: string
    UsageAgreement:
      type: object
      properties:
        text:
          description: The contents of the usage agreement.
          type: string
        version:
          description: The verison of the agreement
          type: number
          format: float
          x-java-field-annotations:
            - "@javax.persistence.Id"
            - '@javax.persistence.Column(name = "version", updatable = true, nullable = false)'
        start_date:
          format: date
          description: The date the agreement began
          type: string
        end_date:
          format: date
          description: The date the agreement expires
          type: string
      x-java-class-annotations:
        - "@javax.persistence.Entity"
        - >-
          @javax.persistence.Table( name = "usage_agreement_terms", uniqueConstraints={
          @javax.persistence.UniqueConstraint(columnNames={"version"}) })
    EmployeeSkillHistory:
      type: object
      properties:
        project:
          description: Name of project that consultant was part of
          type: string
          example: "Bank of America"
        skills:  
          description:  Array of skills that the consultant used at the project
          type: array
          items:
            type: string
            example: "Spring"
    EmployeeAggregateSkillRatings:
      type:  object
      properties:
        skill:
          description:  Skill that the consultant was rated on
          type: string
          example: "Spring"
        rating:
          description:  Aggregate skill rating for the above skill 
          type: integer
          example: 5
externalDocs:
  description: App Dev Practice
  url: "https://mojo.redhat.com/docs/DOC-1208144"
